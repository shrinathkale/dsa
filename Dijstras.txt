#include <iostream>
#include <climits>
using namespace std;
// This method returns the vertex with the minimum distance
// that is not included in Tset.
int minimumDist(int dist[], bool Tset[]) {
 int min = INT_MAX, index;
 for (int i = 0; i < 6; i++) {
 if (Tset[i] == false && dist[i] <= min) {
 min = dist[i];
 index = i;
 }
 }
 return index;
}
// Dijkstra's algorithm using an adjacency matrix of size 6x6.
void Dijkstra(int graph[6][6], int src) {
 int dist[6]; // Array to store the shortest distance for each node.
 bool Tset[6]; // Array to mark visited/unvisited nodes.
 // Initialize all nodes with infinite distance except the source.
 for (int i = 0; i < 6; i++) {
 dist[i] = INT_MAX;
 Tset[i] = false;
 }
 dist[src] = 0; // Distance of the source node to itself is 0.
 // Loop to find the shortest path for all vertices.
 for (int i = 0; i < 6; i++) {
 int m = minimumDist(dist, Tset); // Get the vertex with the minimum distance.
 Tset[m] = true; // Mark the vertex as visited.
 // Update the distance value of the adjacent vertices of the picked vertex.
 for (int j = 0; j < 6; j++) {
 if (!Tset[j] && graph[m][j] && dist[m] != INT_MAX
 && dist[m] + graph[m][j] < dist[j]) {
 dist[j] = dist[m] + graph[m][j];
 }
 }
 }
 // Print the results.
 cout << "Vertex\t\tDistance from Source" << endl;
 for (int i = 0; i < 6; i++) {
 char str = 65 + i; // ASCII value for A, B, C...
 cout << str << "\t\t\t" << dist[i] << endl;
 }
}
int main() {
 // Adjacency matrix representation of the graph.
 int graph[6][6] = {
 {0, 10, 20, 0, 0, 0},
 {10, 0, 0, 50, 10, 0},
 {20, 0, 0, 20, 33, 0},
 {0, 50, 20, 0, 20, 2},
 {0, 10, 33, 20, 0, 1},
 {0, 0, 0, 2, 1, 0}
 };
 Dijkstra(graph, 0); // Call Dijkstra with source vertex 0.
 return 0;
}
Output:-
Vertex Distance from Source
A 0
B 10
C 20
D 23
E 20
F 21